/*! sum3 2020-04-17 */

const express=require("express"),app=express(),mongoose=require("mongoose"),bodyParser=require("body-parser"),cors=require("cors"),bcryptjs=require("bcryptjs"),config=require("./config.json"),User=require("./models/users.js"),Product=require("./models/products.js"),Comment=require("./models/comments.js"),port=3e3,mongodbURI=`mongodb+srv://${config.MONGO_USER}:${config.MONGO_PASS}@${config.MONGO_CLUSTER}.mongodb.net/${config.MONGO_DB_NAME}?retryWrites=true&w=majority`;mongoose.connect(mongodbURI,{useNewUrlParser:!0,useUnifiedTopology:!0}).then(()=>console.log("Database connected")).catch(e=>console.log(`Database connection error: ${e.message}`));const db=mongoose.connection;db.on("error",console.error.bind(console,"connection error:")),db.once("open",function(){console.log("We are connected to MongoDB")}),app.use((e,d,t)=>{console.log(`${e.method} request for ${e.url}`),t()}),app.use(bodyParser.json()),app.use(bodyParser.urlencoded({extended:!1})),app.use(cors()),app.get("/",(e,d)=>d.send("Hello World!")),app.get("/products",(e,d)=>{Product.find().then(e=>{d.send(e)})}),app.get("/products/p=:id",(e,d)=>{const t=e.params.id;Product.findOne({_id:t},(e,t)=>{t?d.send(t):d.send("Can't find Product with this ID")}).catch(e=>d.send(e))}),app.post("/addProduct/",(e,d)=>{new Product({_id:new mongoose.Types.ObjectId,title:e.body.title,description:e.body.description,price:e.body.price,image:e.body.image,status:e.body.status,keywords:e.body.keywords,sellerId:e.body.sellerId,buyerId:e.body.buyerId,category:e.body.category,shipping:{pickup:e.body.pickup,deliver:e.body.deliver}}).save().then(e=>{d.send(e)}).catch(e=>d.send(e))}),app.delete("/deleteProduct/p=:id",(e,d)=>{const t=e.params.id;Product.findOne({_id:t},(e,o)=>{o?Product.deleteOne({_id:t},e=>{d.send("Product deleted")}):d.send("Can't delete Product. ID Not found")}).catch(e=>d.send(e))}),app.patch("/updateProduct/p=:id",(e,d)=>{const t=e.params.id;Product.findById(t,(o,s)=>{const n={title:e.body.title,description:e.body.description,price:e.body.price,image:e.body.image,keywords:e.body.keywords,category:e.body.category,$set:{shipping:{pickup:e.body.pickup,deliver:e.body.deliver}}};Product.updateOne({_id:t},n).then(e=>{d.send(e)}).catch(e=>d.send(e))}).catch(e=>d.send("Not found"))}),app.patch("/productSold/p=:id",(e,d)=>{const t=e.params.id;Product.findById(t,(o,s)=>{const n={status:e.body.status,buyerId:e.body.buyerId};Product.updateOne({_id:t},n).then(e=>{d.send(e)}).catch(e=>d.send(e))}).catch(e=>d.send("Not found"))}),app.patch("/updateBalance/u=:id",(e,d)=>{const t=e.params.id;User.findById(t,(o,s)=>{const n={balance:e.body.balance};User.updateOne({_id:t},n).then(e=>{d.send(e)}).catch(e=>d.send(e))}).catch(e=>d.send("Not found"))}),app.get("/comments",(e,d)=>{Comment.find().then(e=>{d.send(e)})}),app.get("/comments/p=:id",(e,d)=>{const t=e.params.id;Comment.find({productId:t},(e,t)=>{t?d.send(t):d.send("Can't find Product with this ID")}).catch(e=>d.send(e))}),app.post("/addComment/",(e,d)=>{new Comment({_id:new mongoose.Types.ObjectId,text:e.body.text,time:new Date,userId:e.body.userId,productId:e.body.productId,replies:e.body.replies}).save().then(e=>{d.send(e)}).catch(e=>d.send(e))}),app.patch("/editComment/c=:id",(e,d)=>{const t=e.params.id;Comment.findById(t,(o,s)=>{const n={text:e.body.text};Comment.updateOne({_id:t},n).then(e=>{d.send(e)}).catch(e=>d.send(e))}).catch(e=>d.send("Not found"))}),app.patch("/commentReply/c=:id",(e,d)=>{const t=e.params.id;Comment.findById(t,(o,s)=>{const n={$push:{replies:{text:e.body.text,time:e.body.time,userId:e.body.userId}}};Comment.updateOne({_id:t},n).then(e=>{d.send(e)}).catch(e=>d.send(e))}).catch(e=>d.send("Not found"))}),app.delete("/deleteComment/c=:id",(e,d)=>{const t=e.params.id;Comment.findOne({_id:t},(e,o)=>{o?Comment.deleteOne({_id:t},e=>{d.send("Comment deleted")}):d.send("Can't delete Comment. ID Not found")}).catch(e=>d.send(e))}),app.get("/users",(e,d)=>{User.find().then(e=>{d.send(e)})}),app.get("/users/u=:id",(e,d)=>{const t=e.params.id;User.findOne({_id:t},(e,t)=>{t?d.send(t):d.send("Can't find user with this ID")}).catch(e=>d.send(e))}),app.post("/register",(e,d)=>{User.findOne({username:e.body.username},(t,o)=>{if(o)d.send("This username is already taken. Please try another one");else{const t=bcryptjs.hashSync(e.body.password);new User({_id:new mongoose.Types.ObjectId,username:e.body.username,firstName:e.body.firstName,lastName:e.body.lastName,email:e.body.email,password:t,watchlist:e.body.watchlist,balance:e.body.balance,location:e.body.location}).save().then(e=>{d.send(e)}).catch(e=>d.send(e))}})}),app.post("/login",(e,d)=>{User.findOne({username:e.body.username},(t,o)=>{o?bcryptjs.compareSync(e.body.password,o.password)?d.send(o):d.send("Not authorised. Incorrect password"):d.send("User not found")})}),app.patch("/updateUser/u=:id",(e,d)=>{const t=e.params.id;User.findById(t,(o,s)=>{const n={firstName:e.body.firstName,lastName:e.body.lastName,email:e.body.email,location:e.body.location};User.updateOne({_id:t},n).then(e=>{d.send(e)}).catch(e=>d.send(e))}).catch(e=>d.send("Not found"))}),app.patch("/updateWatchlist/u=:id",(e,d)=>{const t=e.params.id;User.findById(t,(o,s)=>{const n={$push:{watchlist:e.body.watchlist}};User.updateOne({_id:t},n).then(e=>{d.send(e)}).catch(e=>d.send(e))}).catch(e=>d.send("Not found"))}),app.patch("/removeWatchlist/u=:id",(e,d)=>{const t=e.params.id;User.findById(t,(o,s)=>{const n={$pull:{watchlist:e.body.watchlist}};User.updateOne({_id:t},n).then(e=>{d.send(e)}).catch(e=>d.send(e))}).catch(e=>d.send("Not found"))}),app.delete("/deleteUser/u=:id",(e,d)=>{const t=e.params.id;User.findOne({_id:t},(e,o)=>{o?User.deleteOne({_id:t},e=>{d.send("User deleted")}):d.send("Can't delete user. Not found")}).catch(e=>d.send(e))}),app.listen(3e3,()=>console.log("App listening on port 3000!"));